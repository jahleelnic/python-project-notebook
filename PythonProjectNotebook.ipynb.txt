{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c881eacb",
   "metadata": {},
   "source": [
    "## Equilateral Triangle Checker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0acf8843",
   "metadata": {},
   "outputs": [],
   "source": [
    "= equilateralpy x\n",
    "\n",
    "waVaunrune\n",
    "\n",
    "10\n",
    "11\n",
    "12\n",
    "13\n",
    "14\n",
    "15\n",
    "16\n",
    "7\n",
    "18\n",
    "19\n",
    "\n",
    "equilateral.py\n",
    "\n",
    "Equilateral Triangle Checker\n",
    "\n",
    "This program checks whether a triangle is equilateral.\n",
    "It prompts the user to enter the lengths of three sides,\n",
    "then determines if all sides are equal.\n",
    "\n",
    "# Step 1: Get user input for the three sides of the triangle\n",
    "side1 = float(input(\"Enter the first side: \"))\n",
    "side2 = float(input(“Enter the second side: \"))\n",
    "side3 = float(input(\"Enter the third side: \"))\n",
    "\n",
    "# Step 2: Check if all three sides are equal\n",
    "if sidel == side2 == side3:\n",
    "\n",
    "print(\"The triangle is equilateral.\n",
    "else:\n",
    "\n",
    "print(\"The triangle is not equilateral\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21250cf4",
   "metadata": {},
   "source": [
    "## Population Growth Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0450ee9",
   "metadata": {},
   "outputs": [],
   "source": [
    "® populationpy x\n",
    "® population.py\n",
    "\n",
    "Population Growth Predictor\n",
    "\n",
    "This program predicts the population growth of organisms.\n",
    "It takes inputs for the initial population, growth rate, growth period,\n",
    "and total time and calculates the total population.\n",
    "\n",
    "Pseudocode:\n",
    "1. Ask the user to enter:\n",
    "\n",
    "- Initial number of organisms\n",
    "\n",
    "= Growth rate (must be greater than 1)\n",
    "\n",
    "- Number of hours to achieve growth rate\n",
    "\n",
    "= Total number of hours for population growth\n",
    "2. Use the formula:\n",
    "\n",
    "- Total Population = Initial Population * (Growth Rate)*(Total Hours / Growth Period)\n",
    "3. Display the predicted total population.\n",
    "\n",
    "# Step 1: Get user inputs\n",
    "\n",
    "initial_population = int(input(\"Enter the initial number of organisms: \"))\n",
    "\n",
    "growth_rate = float(input(\"Enter the rate of growth [a real number > 1]: \"))\n",
    "growth_period = int(input(\"Enter the number of hours to achieve the rate of growth: \"))\n",
    "total_hours = int(input(\"Enter the total hours of growth: \"))\n",
    "\n",
    "# Step 2: Calculate the total population using exponential growth\n",
    "num_growth_cycles = total_hours // growth_period\n",
    "total_population = initial_population * (growth_rate ** num_growth_cycles)\n",
    "\n",
    "# Step 3: Display the total population as an integer\n",
    "print(f\"\\nThe total population is {int (total_population)}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76be1283",
   "metadata": {},
   "source": [
    "## Mean, Median, and Mode Calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54d4e215",
   "metadata": {},
   "outputs": [],
   "source": [
    "> staepy x\n",
    "@ sutspy\n",
    "io stats.py\n",
    "\n",
    "‘from collections import counter\n",
    "\n",
    "2\n",
    "3\n",
    "\n",
    "4\n",
    "\n",
    "5 def mean(numbers)\n",
    "6 if not numbers:\n",
    "7\n",
    "a\n",
    "9\n",
    "\n",
    "return @\n",
    "return sun(nunbers) / len(numbers)\n",
    "\n",
    "2 {if len(modes) == len(set(numbers)): # No node if all nunbers are unique\n",
    "28 return @\n",
    "\n",
    "23 return modes[@] if len(modes) == 1 else modes # Return first mode or list of modes\n",
    "\n",
    "a |\n",
    "\n",
    "38 # Run the program\n",
    "39° if _name_ == *\n",
    "\n",
    "4 main()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81aa4d2e",
   "metadata": {},
   "source": [
    "## Base Conversion Tool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab4de6fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "> convertpy\n",
    "\n",
    "1\n",
    "\n",
    "# convert. py\n",
    "\n",
    "# Lookup table for digits and letters a-F\n",
    "\n",
    "if digit not in digittable or digitrable[digit] >- base:\n",
    "raise Valuecrror(F*Invalid digit ‘{digit}* for base {base}\")\n",
    "value = digittable[digit]\n",
    "decimal += value * (base ** power)\n",
    "ower += 1\n",
    "\n",
    "return decimal\n",
    "\n",
    "def main():\n",
    "print (\"ease conversion tests:\n",
    "print(‘reprobecinal(\"10\", 8)\n",
    "print(“reprovecinal(“10\", 16)\n",
    "\n",
    "\", PepTopecinal(\"1e\", 8)) #8\n",
    "repTobecimal(\"10\", 16)) #16\n",
    "print(‘reproDecimal(“1a\", 16) =\", repToDecimal(“1A\", 16)) # 25\n",
    "print(‘reproDecimal(\"1@1\", 2) =\", repToDecinal(“1e1\", 2)) #5\n",
    "\n",
    "print(‘reproDecimal(\"77\", 8) =\", repTodecimal(\"77\", 8) # 63\n",
    "print(‘repToDecimal(“FF\", 16) =\", repToDecimal(\"FF\", 16))  # 255\n",
    "\n",
    "# Run the program\n",
    "if _name_\n",
    "main()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d745d71",
   "metadata": {},
   "source": [
    "## Sorted List Checker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64f10989",
   "metadata": {},
   "outputs": [],
   "source": [
    "# testsort py\n",
    "1 # testsort.py\n",
    "\n",
    "2\n",
    "3 def isSorted(Ist):\n",
    "4 # An empty list or single-item list is considered sorted\n",
    "5 if len(Ist) <= 1:\n",
    "\n",
    "6 return True\n",
    "\n",
    "7 # Check each pair of elements\n",
    "\n",
    "8 for i in range(len(1st) - 1):\n",
    "\n",
    "9 if Ist[i] > Ist[i + 1]:\n",
    "\n",
    "10 return False\n",
    "em return True\n",
    "12\n",
    "\n",
    "13 # Short tester program\n",
    "14 if _name__ == “_main\n",
    "\n",
    "15 # Test cases\n",
    "16 print(“Test 1:\", isSorted([1, 2, 3, 4, 5])) # True\n",
    "7 print(“Test 2:\", isSorted([5, 4, 3, 2, 1])) # False\n",
    "18 print(“Test 3:\", isSorted([])) # True\n",
    "\n",
    "19 print(\"Test 4:\", isSorted([10])) # True\n",
    "\n",
    "20 print(“Test 5:\", isSorted([3, 3, 5, 7]))  # True\n",
    "a print(“Test 6:\", isSorted([2, 2, 2, 1]))  # False\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e97004",
   "metadata": {},
   "source": [
    "## Command Menu Interpreter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "092082eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "® commandinterpreter.py\n",
    "1 # commandinterpreter.py\n",
    "\n",
    "2\n",
    "3 def printMenu(menu)\n",
    "\n",
    "4 for i, item in enumerate(menu, start:\n",
    "\n",
    "5 print(#\"{i} {item}\")\n",
    "\n",
    "6\n",
    "\n",
    "7 def acceptConmand(length):\n",
    "\n",
    "8 while True:\n",
    "\n",
    "9 try:\n",
    "\n",
    "18 choice = int(input(\"Enter a number: “))\n",
    "ca if 1 < choice <= length:\n",
    "\n",
    "12 return choice\n",
    "\n",
    "13 else:\n",
    "\n",
    "14 print(f\"Invalid input. Please enter a number between 1 and {length}.\")\n",
    "15 except Valuetrror:\n",
    "\n",
    "16 print(“Invalid input. Please enter a valid number.\n",
    "7\n",
    "\n",
    "48 def performCommand(commandNumber, menu):\n",
    "\n",
    "19 print(#\"Command = {menu[commandNumber - 1]}\")\n",
    "\n",
    "20\n",
    "\n",
    "21 def main():\n",
    "\n",
    "22 # You can test with this or any other menu\n",
    "\n",
    "23 menu = [\"Open”, “Save”, “Compile”, “Run”, “Quit”]\n",
    "24\n",
    "\n",
    "25 while True:\n",
    "\n",
    "26 printMenu(menu)\n",
    "\n",
    "a commandNumber = acceptCommand(1en(menu) )\n",
    "\n",
    "28 performCommand(commandNumber, menu)\n",
    "\n",
    "29 if menu[commandNumber - 1] == “Quit”\n",
    "\n",
    "3e print (“Have a nice day!\")\n",
    "\n",
    "31 break\n",
    "\n",
    "32\n",
    "\n",
    "33 # Run the program\n",
    "34 if _name_ == “_main_'\n",
    "35 main()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5b27c82",
   "metadata": {},
   "source": [
    "## Circle Drawer Using Turtle Graphics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0eeaf03d",
   "metadata": {},
   "outputs": [],
   "source": [
    "®@ cirlepy x\n",
    "\n",
    "® circlepy\n",
    "1 import turtle\n",
    "2 import math\n",
    "3\n",
    "4 def drawCircle(t, centerx, centerY, radius):\n",
    "5 “Draws a circle using the given turtle, center point, and radius.\n",
    "6 # Move turtle to the starting position (at edge of circle)\n",
    "7 ‘t.penup()\n",
    "8 t.goto(centerx + radius, centerY) # Start at rightmost point on the circle\n",
    "9 t.setheading(9®) # Set facing direction to upward\n",
    "10 t.pendown()\n",
    "11\n",
    "12 # Calculate step size\n",
    "23 step_length = 2.0 * math.pi * radius / 120.0\n",
    "14\n",
    "45 # Draw the circle using 120 steps (each turning 3 degrees)\n",
    "16 for _ in range(128):\n",
    "7 teleft(3)\n",
    "18 ‘t-forward(step_length)\n",
    "19\n",
    "\n",
    "20 # Test the function if this file is run directly\n",
    "21 if _name_ H\n",
    "\n",
    "22 screen = turtle.Screen()\n",
    "23 t = turtle.Turtle()\n",
    "\n",
    "24 drawCircle(t, @, @, 100) # Example: draw circle with center at (@, @) and radius 160\n",
    "25 screen.mainloop()\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
